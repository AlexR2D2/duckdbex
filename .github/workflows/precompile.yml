name: precompile

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  DUCKDBEX_VERSION: "0.3.15"
  DUCKDB_VERSION: "1.4.0"

jobs:
  linux:
    runs-on: ubuntu-22.04
    env:
      ImageOS: ubuntu22
      LANG: en_US.UTF-8
      LANGUAGE: en_US:en
      LC_ALL: en_US.UTF-8
      DEBIAN_FRONTEND: noninteractive
      MIX_ENV: prod
    strategy:
      matrix:
        arch:
          - x86_64
          - aarch64
          - riscv64
        job:
          - {otp: "27.0", elixir: "1.17.3"}
          - {otp: "25.0", elixir: "1.16"}
    name: Linux ${{ matrix.arch }} - OTP ${{ matrix.job.otp }} - Elixir ${{ matrix.job.elixir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip wget curl ca-certificates libssl-dev \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-riscv64-linux-gnu g++-riscv64-linux-gnu \
            libstdc++-10-dev erlang-dev ccache

      - name: Install x86_64 specific deps
        if: matrix.arch == 'x86_64'
        run: |
          sudo apt-get install -y gcc-i686-linux-gnu g++-i686-linux-gnu \
            gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu \
            gcc-s390x-linux-gnu g++-s390x-linux-gnu

      - name: Install aarch64 specific deps
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install riscv64 specific deps
        if: matrix.arch == 'riscv64'
        run: |
          sudo apt-get install -y gcc-riscv64-linux-gnu g++-riscv64-linux-gnu

      - name: Get musl ${{ matrix.arch }} cross-compilers
        run: |
          wget "https://musl.cc.timfish.dev/${{matrix.arch}}-linux-musl-cross.tgz" -O "${{matrix.arch}}-linux-musl-cross.tgz"
          tar -xf "${{matrix.arch}}-linux-musl-cross.tgz"

      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.job.otp }}
          elixir-version: ${{ matrix.job.elixir }}

      - name: Setup Mix
        run: |
          mix local.hex --force
          mix local.rebar --force

      - name: Patch source code
        run: |
          echo '#define _GLIBCXX_USE_C99_MATH 1' > temp_header.hpp
          echo '#include <cmath>' >> temp_header.hpp
          echo '#include <math.h>' >> temp_header.hpp
          cat temp_header.hpp c_src/value_to_term.cpp > value_to_term_new.cpp
          mv value_to_term_new.cpp c_src/value_to_term.cpp

      - name: Create precompiled ${{ matrix.arch }} library
        run: |
          export PATH="$(pwd)/${{ matrix.arch }}-linux-musl-cross/bin:${PATH}"
          export ELIXIR_MAKE_CACHE_DIR=$(pwd)/cache
          mkdir -p "${ELIXIR_MAKE_CACHE_DIR}"
          export CC="ccache gcc"
          export CXX="ccache g++"
          export CXXFLAGS="-D_GNU_SOURCE -std=c++11"
          export MAKEFLAGS="-j$(nproc)"
          mix deps.get
          mix elixir_make.precompile

      - name: Mix Test
        run: |
          export ELIXIR_MAKE_FORCE_BUILD=1
          MIX_ENV=test mix test

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.arch == 'x86_64'
        with:
          files: |
            cache/*.tar.gz

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.arch == 'x86_64'
        with:
          files: |
            cache/*.tar.gz

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.arch != 'x86_64'
        with:
          files: |
            cache/*${{ matrix.arch }}*.tar.gz


  macos:
    runs-on: macos-14
    env:
      MIX_ENV: prod
      CC_PRECOMPILER_PRECOMPILE_ONLY_LOCAL: "true"
    strategy:
      matrix:
        arch:
          - x86_64-apple-darwin
          - arm64-apple-darwin
        job:
          - {otp: "27.0.1", elixir: "1.17.2"}
          - {otp: "25.3.2.13", elixir: "1.16.3"}

    name: Mac ${{ matrix.arch }} - OTP ${{ matrix.job.otp }} - Elixir ${{ matrix.job.elixir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install asdf
        uses: asdf-vm/actions/setup@v4

      - name: Cache asdf
        id: asdf-cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: asdf-${{ runner.os }}-build-${{ matrix.job.otp }}-${{ matrix.job.elixir }}

      - if: ${{ steps.asdf-cache.outputs.cache-hit != 'true' }}
        name: Install Erlang & Elixir
        env:
          ELIXIR_VERSION: ${{ matrix.job.elixir }}
          OTP_VERSION: ${{ matrix.job.otp }}
        run: |
          asdf plugin add erlang
          asdf install erlang ${OTP_VERSION}

          ELIXIR_OTP_VERSION=$(echo $OTP_VERSION | cut -d. -f1)
          asdf plugin add elixir
          asdf install elixir ${ELIXIR_VERSION}-otp-${ELIXIR_OTP_VERSION}

      - name: Setup Erlang & Elixir
        env:
          ELIXIR_VERSION: ${{ matrix.job.elixir }}
          OTP_VERSION: ${{ matrix.job.otp }}
        run: |
          asdf set erlang ${OTP_VERSION}
          ELIXIR_OTP_VERSION=$(echo $OTP_VERSION | cut -d. -f1)
          asdf set elixir ${ELIXIR_VERSION}-otp-${ELIXIR_OTP_VERSION}

      - name: Install libomp and ccache
        run: |
          brew install libomp ccache
          echo "$(brew --prefix)/bin" >> $GITHUB_PATH

      - name: Install hex & rebar
        run: |
          mix local.hex --force
          mix local.rebar --force

      - name: Patch source code
        run: |
          echo '#include <cmath>' > temp_header.hpp
          echo '#include <math.h>' >> temp_header.hpp
          cat temp_header.hpp c_src/value_to_term.cpp > value_to_term_new.cpp
          mv value_to_term_new.cpp c_src/value_to_term.cpp

      - name: Pre-compile NIF library
        run: |
          export ELIXIR_MAKE_CACHE_DIR=$(pwd)/cache
          mkdir -p "${ELIXIR_MAKE_CACHE_DIR}"
          mix deps.get
          export CC="ccache clang"
          export CXX="ccache clang++"
          export CXXFLAGS="-std=c++11"
          export MAKEFLAGS="-j$(sysctl -n hw.ncpu)"
          mix elixir_make.precompile

      - name: Mix Test
        run: |
          MIX_ENV=test mix test

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            cache/*.tar.gz
